create table if not exists Tour(
tour_name varchar(100) primary key,
start_date date not null,
finish_date date not null
check(finish_date > start_date)
);

insert into tour
values("Lilacs", '2021-03-13', '2021-03-17'),
("Tulips", '2021-07-02', '2021-07-10'),
("Basis", '2021-05-16', '2021-05-17'),
("Roses", '2021-01-01', '2021-02-01'),
("Violets", '2020-09-22', '2021-02-14');

create table if not exists Location(
loc_ID int auto_increment primary key,
loc_name varchar(100) not null,
address varchar(100) not null,
capacity int not null check(capacity >= 1),
type varchar(100) not null
);

insert into location(loc_name, address, capacity, type)
values("Aula Barat ITB", "Jalan Ganesha ITB", 300, "Aula"),
("Lapangan Basket", "Jalan Ganesha ITB", 350, "Lapangan"),
("West Avenue", "Wall Street Manhattan", 175, "Avenue"),
("Red Rocks", "Alameda Street Morison", 1202, "Amphiteatre"),
("Amphiteatre ITB", "Jalan Ganesha ITB", 200, "Amphiteatre");

create table if not exists Artist(
artist_ID int auto_increment primary key,
artist_name varchar(100) not null,
gender varchar(20) not null,
country varchar(100) not null,
genre varchar(100) not null
);

insert into Artist(artist_name, gender, country, genre)
values("Alan", "Male", "Kanada", "Electronic"),
("Efendi", "Male", "Indonesia", "Rock"),
("Jeremy", "Male", "England", "Jazz"),
("Niki", "Female", "Indonesia", "R&B"),
("Isyana", "Female", "Indonesia", "Pop");

create table if not exists User(
user_ID int auto_increment primary key,
first_name varchar(100) not null,
last_name varchar(100) not null,
birth_date date not null
);

insert into User(first_name, last_name, birth_date)
values("Fabi", "Anandi", '2001-01-22'),
("Eja", "Morteza", '2000-11-09'),
("Nadim", "Amizah", '2005-06-29'),
("Kiya", "Utama", '2001-09-10'),
("Rafli", "Ananda", '2002-05-12');

create table if not exists Album(
album_name varchar(100),
artist_id int,
song_amount int not null default(0),
released_year year not null,
primary key(album_name, artist_id),
constraint FK_Artist foreign key(artist_id)
references artist(artist_id)
on delete cascade
on update cascade
);

insert into album(album_name, artist_id, released_year)
values("Love of Basdat", 5, '2020'),
("Basdat Serenade", 2, '2018'), 
("Cry of Database", 3, '2015'),
("Databases of Despairs", 1, '2013'),
("Living in The Database", 5, '2021');

create table if not exists Song(
song_name varchar(100),
album_name varchar(100),
no_track int not null default(1),
duration int not null,
primary key(song_name, album_name),
constraint FK_Album foreign key(album_name)
references album(album_name)
on delete cascade
on update cascade
);

create trigger increaseCount after insert on song
for each row
update album 
set album.song_amount = (select song_amount from album where 
new.album_name = album.album_name) + 1
where new.album_name = album.album_name;

insert into song(song_name, album_name, no_track, duration)
values("I Love Basdat", "Love of Basdat", 1, 212),
("Crying with Basdat", "Basdat Serenade", 1, 230), 
("Lullaby of Database", "Cry of Database", 1, 224),
("The Reason of Database", "Databases of Despairs", 1, 286),
("DATABASE DATABASE!", "Living in The Database", 1, 237),
("JUST LIVING IN THE DATABASE!", "Living in The Database", 2, 246);

create table if not exists `order`(order_ID int auto_increment,
user_ID int,
total_price int not null,
pay_method varchar(30) not null,
primary key(order_ID, user_ID),
constraint FK_User foreign key(user_ID)
references User(user_ID)
on update cascade
on delete cascade
);

create table if not exists concert(
concert_id int auto_increment,
tour_name varchar(100),
loc_ID int,
album_name varchar(100),
artist_ID int,
concert_name varchar(100) not null,
date date not null,
primary key(concert_id, tour_name, loc_ID, album_name, artist_ID),
constraint FK_TourC foreign key(tour_name)
references Tour(tour_name) on update cascade on delete cascade,
constraint FK_LocC foreign key(loc_ID)
references Location(loc_ID) on update cascade on delete cascade,
constraint FK_AlbumC foreign key(album_name)
references Album(album_name) on update cascade on delete cascade,
constraint FK_ArtistC foreign key(artist_ID)
references Artist(artist_ID) on update cascade on delete cascade
);

create table if not exists ticket(
ticket_ID int auto_increment,
concert_ID int,
type varchar(100) not null default("Regular"),
price int not null,
primary key(ticket_ID, concert_ID),
constraint FK_concertID foreign key(concert_ID)
references Concert(concert_ID) on update cascade on delete cascade
);

create table if not exists purchase(
order_ID int,
ticket_ID int,
primary key(order_ID, ticket_ID),
constraint FK_ticketID foreign key(ticket_ID)
references Ticket(ticket_ID) on update cascade on delete cascade,
constraint FK_orderID foreign key(order_ID)
references `order`(order_ID) on update cascade on delete cascade
);

create table if not exists official(
merch_id int,
kode_official varchar(20) not null,
primary key(merch_id),
constraint FK_merchIDO foreign key(merch_ID) 
references Merchandise(merch_ID) on update cascade on delete cascade
);

create table if not exists unofficial(
merch_id int,
supplier varchar(20) not null,
primary key(merch_id),
constraint FK_merchIDU foreign key(merch_ID)
references Merchandise(merch_ID) on update cascade on delete cascade
);

create table if not exists Merchandise(
merch_ID int auto_increment,
concert_ID int,
merch_name varchar(100) not null,
type varchar(100) not null,
price int not null,
primary key(merch_ID, concert_ID),
constraint FK_concertIDmerch foreign key (concert_ID)
references Concert(concert_ID) on update cascade on delete cascade
);

create function eventaja.getAge()
returns real
for each row
return(datediff(curdate(), (select birth_date from `order` o, user where o.user_ID = user.user_ID))/365);

alter table `order`
add constraint check_AGE
check(17 <= getAge(new.user_ID));

(select artist_name, album_name, no_track, song_name, duration, released_year
from artist a natural inner join album al natural inner join song s
where song_amount > 1
order by duration desc)
union
(select artist_name, album_name, no_track, song_name, duration, released_year
from artist a natural inner join album al natural inner join song s
where artist_name in 
(select artist_name from artist a natural inner join album al
where song_amount > 1))
order by duration desc
;

create table if not exists merch_purchase(
order_ID int not null, 
merch_ID int not null,
amount int not null default(1),
check(amount > 0),
primary key(order_ID, merch_ID),
constraint FK_merchpurch foreign key(merch_ID)
references Merchandise(merch_ID) on update cascade on delete cascade,
constraint FK_ordermerch foreign key(order_ID)
references `order`(order_ID) on update cascade on delete cascade)
;

create trigger incMerchUser after insert on merch_purchase
for each row
update user
set user.merch_purchased = (select merch_purchased + new.amount from user where user_ID in
(select user_ID from `order` o, merch_purchase p where o.order_ID = p.order_ID and p.order_ID = new.order_ID))
where user_ID in (select user_ID from `order` o, merch_purchase p where o.order_ID = p.order_ID and p.order_ID = new.order_ID);

create trigger totalOrderPrice_insTicPurc after insert on purchase
for each row
update `order`
set total_price = total_price +
(
select sum(Ticket.price * new.amount)
from Ticket
where Ticket.ticket_ID = new.ticket_ID
)
where new.order_ID = order_ID;

create trigger totalOrderPrice_insMercPurc after insert on merch_purchase
for each row
update `order`
set total_price = total_price +
(
select sum(merchandise.price * new.amount)
from merchandise
where merchandise.merch_ID = new.merch_ID
)
where new.order_ID = order_ID;


insert into merch_purchase(order_ID, merch_ID, amount)
values(1, 2, 2),
(5, 2, 5),
(2, 1, 6),
(4, 12, 10);


// Tambah atribut user
alter table user
add merch_purchased int not null default(0),
add ticket_purchased int not null default(0);

Business Rule

// Concert
alter table concert
add song_performed int not null default(0);

delimiter -
create trigger check_upd_perform before update on concert
for each row
begin
if((select song_amount from album where album.album_name = new.album_name) < new.song_performed)
then
signal sqlstate '45000'
set message_text = 'Invalid amount (bigger than the number of song in the album) of song updated into the concert!';
end if;
end; -
delimiter ;

delimiter -
create trigger check_ins_perform before insert on concert
for each row
begin
if((select song_amount from album where album.album_name = new.album_name) < new.song_performed)
then
signal sqlstate '45000'
set message_text = 'Invalid amount (bigger than the number of song in the album) of song inserted into the concert!';
end if;
end; -
delimiter ;

update concert
set song_performed = 1
where album_name = "Love of Basdat";

insert into concert
(tour_name, loc_ID, album_name, artist_ID, concert_name, date, song_performed)
values("Basis", 2, "Living in The Database", 2, "Invalid Concert", '2005-06-29', 2);


mysqldump -c -u root -p --databases eventaja > Milestone3_Case04_K04_7.sql
